"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const PartidoModelo_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/PartidoModelo"));
const Partido_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Partido"));
const mongoose_1 = __importDefault(require("mongoose"));
class MongosController {
    async guardarMongo({ request, response }) {
        await mongoose_1.default.connect('mongodb+srv://alannunez:celta3011@cluster0.4xeaf.mongodb.net/barco?retryWrites=true&w=majority');
        const clave_sala = request.input('Clave');
        const id_jugador = request.input('jugador');
        const monitor = request.input('monitor');
        const posicion = request.input('posicion');
        const main = request.input('main');
        console.log(clave_sala);
        const crear = new PartidoModelo_1.default.PartidaModelo({ "clave_sala": clave_sala, "jugadores": [{ id_jugador: id_jugador, monitor: monitor }], "main": main, "posicion": posicion });
        crear.save();
        return response.json(crear);
    }
    async insertar({ request, response }) {
        try {
            const Partidos = new Partido_1.default();
            const local = request.input('local');
            const visitante = request.input('visitante');
            const Estadio = request.input('Estadio');
            Partidos.local = local;
            Partidos.visitante = visitante;
            Partidos.Estadio = Estadio;
            await Partidos.save();
            return response.status(200);
        }
        catch {
            return response.status(500);
        }
    }
    async modificarMonitor({ request, response }) {
        try {
            await mongoose_1.default.connect('mongodb+srv://alannunez:celta3011@cluster0.4xeaf.mongodb.net/barco?retryWrites=true&w=majority');
            const clave_sala = request.input('clave_sala');
            const monitor = request.input('monitor');
            const newmonitor = request.input('newmoni');
            response = await PartidoModelo_1.default.PartidaModelo.updateOne({ clave_sala: clave_sala, "jugadores.monitor": monitor }, { $set: { "jugadores.$.monitor": newmonitor } });
            return response;
        }
        catch {
            return response.badRequest('Hubo un error');
        }
    }
    async modificarPos({ request, response }) {
        try {
            await mongoose_1.default.connect('mongodb+srv://alannunez:celta3011@cluster0.4xeaf.mongodb.net/barco?retryWrites=true&w=majority');
            const clave_sala = request.input('clave_sala');
            const posicion = request.input('posicion');
            const monitor = request.input('main');
            console.log(clave_sala);
            response = await PartidoModelo_1.default.PartidaModelo.updateOne({ clave_sala: clave_sala }, { $set: { "posicion": posicion, "main": monitor } });
            return response;
        }
        catch {
            return response.badRequest('Hubo un error');
        }
    }
    async getPartida({ params, response }) {
        try {
            await mongoose_1.default.connect('mongodb+srv://alannunez:celta3011@cluster0.4xeaf.mongodb.net/barco?retryWrites=true&w=majority');
            console.log(params.id);
            response = await PartidoModelo_1.default.PartidaModelo.find({ clave_sala: params.id });
            return response;
        }
        catch {
            return response.badRequest('Hubo un error');
        }
    }
    async agregarJugador({ request, response }) {
        try {
            await mongoose_1.default.connect('mongodb+srv://alannunez:celta3011@cluster0.4xeaf.mongodb.net/barco?retryWrites=true&w=majority');
            const clave_sala = request.input('clave_sala');
            const monitor = request.input('monitor');
            const jugador = request.input('jugador');
            console.log(clave_sala);
            response = await PartidoModelo_1.default.PartidaModelo.updateOne({ clave_sala: clave_sala }, { $push: { "jugadores": { id_jugador: jugador, monitor: monitor } } });
            return response;
        }
        catch {
            return response.badRequest('Hubo un error');
        }
    }
    async verPartido() {
        const partido = Database_1.default.query()
            .select('p.id as id', 'local.Nombre_Equipo as Local', 'visitante.Nombre_Equipo as Visitante', 'estadio.Nombre_Estadio as Estadio')
            .from('partidos as p')
            .join('equipos as local', 'p.local', '=', 'local.id')
            .join('equipos as visitante', 'p.visitante', '=', 'visitante.id')
            .join('estadios as estadio', 'p.Estadio', '=', 'estadio.id');
        return partido;
    }
    async verPartidas({ response }) {
        await mongoose_1.default.connect('mongodb+srv://alannunez:celta3011@cluster0.4xeaf.mongodb.net/barco?retryWrites=true&w=majority');
        response = await PartidoModelo_1.default.PartidaModelo.find();
        return response;
    }
    async delete({ auth, response, params }) {
        try {
            await auth.use('api').authenticate();
            const Equipos = await Partido_1.default.findOrFail(params.id);
            await Equipos.delete();
        }
        catch {
            return response.badRequest('ERROR');
        }
    }
}
exports.default = MongosController;
//# sourceMappingURL=data:application/json;base64,